var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CodonMolecularEvolution","category":"page"},{"location":"#CodonMolecularEvolution","page":"Home","title":"CodonMolecularEvolution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CodonMolecularEvolution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CodonMolecularEvolution]","category":"page"},{"location":"#CodonMolecularEvolution.benchmark_global_fit-Tuple{Any}","page":"Home","title":"CodonMolecularEvolution.benchmark_global_fit","text":"CodonMolecularEvolution.benchmark_global_fit(benchmark_name; exports=true, data=1:5, optimize_branch_lengths=false)\n\nBenchmarks different implementations of the difFUBARglobalfit algorithm. Results of the benchmark are printed out as a DataFrame and saved to a CSV file.  Uses the heuristic top pick to generate con lik matrices. Compares difference in con lik matrices. If exports is true, it also runs MCMCs on the con lik matrices and plots the means and posteriors of the different versions.\n\nbenchmark_name is the filepath to where the benchmark will be saved, if exports.\ndata is the range/vector of datasets to run the benchmark on. By default, this is 1:5. These are the enumerated datasets:\nAce2nobackground\nAce2reallytiny\nAce2tiny\nParvoVP\nParvoVPregrouped\noptimize_branch_lengths is an option that can be either true, false or \"detect\"\n\n\n\n\n\n","category":"method"},{"location":"#CodonMolecularEvolution.benchmark_grid-Tuple{Any}","page":"Home","title":"CodonMolecularEvolution.benchmark_grid","text":"CodonMolecularEvolution.benchmark_grid(benchmark_name; exports=true, versions_option=1, t::Integer=0, data=1:5)\n\nBenchmarks different implementations of the difFUBAR_grid algorithm. Results of the benchmark are printed out as a DataFrame and saved to a CSV file.\n\nbenchmark_name is the filepath to where the benchmark will be saved, if exports\nversions_option have 4 different options:\ndefault option, only run heuristic top pick\nonly run baseline version\nrun heuristic top pick and baseline version\nrun all versions\nt is the number of threads you want to use in the parallel versions. If specified and non-zero, this will override the number of threads chosen by the heuristic.\ndata is the range/vector of datasets to run the benchmark on. By default, this is 1:5. These are the enumerated datasets:\nAce2nobackground\nAce2reallytiny\nAce2tiny\nParvoVP\nParvoVPregrouped\n\n\n\n\n\n","category":"method"},{"location":"#CodonMolecularEvolution.difFUBAR_init-NTuple{4, Any}","page":"Home","title":"CodonMolecularEvolution.difFUBAR_init","text":"\n\n\n\n","category":"method"},{"location":"#CodonMolecularEvolution.getpuresubclades-Tuple{MolecularEvolution.FelNode, Vector{String}}","page":"Home","title":"CodonMolecularEvolution.getpuresubclades","text":"getpuresubclades(tree::FelNode, tags::Vector{String})\n\nShould usually be called on the root of the tree. Traverses the tree iteratively with a depth-first search to find roots of pure subclades, presuming that nodenames have been trailed with tags. Returns a Vector{FelNode} with root-nodes of the pure subclades.\n\n\n\n\n\n","category":"method"},{"location":"#CodonMolecularEvolution.import_colored_figtree_nexus_as_tagged_tree-Tuple{Any}","page":"Home","title":"CodonMolecularEvolution.import_colored_figtree_nexus_as_tagged_tree","text":"scrape_figtree_colored_nexus(fname; custom_labels = String[])\n\nTakes a nexus file from FigTree, where branches have been colored. Replaces all color tags with group tags that can be used in the models. Can add custom labels too. Should consider an entire custom dictionary as well in future.\n\n\n\n\n\n","category":"method"},{"location":"#CodonMolecularEvolution.optimize_MG94_F3x4-Tuple{Any, Any, Any}","page":"Home","title":"CodonMolecularEvolution.optimize_MG94_F3x4","text":"optimize_MG94_F3x4(seqnames, seqs, treestring; leaf_name_transform = x -> x)\n\nOptimizes the MG94+F3x4 model on a tree, given a set of sequences and a tree. Returns the optimized tree, alpha, beta, nucmatrix, F3x4, and eqfreqs. The leafnametransform kwarg can be used to transform the leaf names in the tree to match the seqnames.\n\n\n\n\n\n","category":"method"}]
}
